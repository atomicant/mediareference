<?php
// $Id: $

/**
 * @file
 * Defines a widget for referencing media content from another. With multiple
 * select a multiple upload features and AJAX interface.
 *
 * IMPORTANT! Javascript for admin UI is needed!
 *
 * @author
 * Vojtech Kusy <wojtha@gmail.com>, http://vojtechkusy.com
 *
 */

//=========================================
//    CONFIGURATION
//=========================================

// Image
define('MEDIAREF_IMAGE_TYPE', 'image');
define('MEDIAREF_IMAGE_THUMBNAIL', 'field_image');
define('MEDIAREF_IMAGE_FIELDS', 'title|description|link');

// Video
define('MEDIAREF_VIDEO_TYPE', 'video');
define('MEDIAREF_VIDEO_THUMBNAIL', 'field_image');
define('MEDIAREF_VIDEO_FIELDS', 'title|description');

// Slideshow
define('MEDIAREF_SLIDESHOW_TYPE', 'slideshow');
define('MEDIAREF_SLIDESHOW_THUMBNAIL', 'field_image');
define('MEDIAREF_SLIDESHOW_FIELDS', 'title|description|link|color');

// Imagecache
define('MEDIAREF_IMAGECACHE_THUMB_PROFILE', 'mediareference_thumbs');

//=========================================
//    DRUPAL HOOKS
//=========================================

/**
 * Implementation of hook_init()
 */
function mediareference_init() {
  module_load_include('inc', 'mediareference', 'mediareference.field');
  module_load_include('inc', 'mediareference', 'mediareference.widget');
  if (!empty($_REQUEST['lightframe'])) {
    mediareference_lightframe_child_js();
  }
}

/**
 * Implementation of hook_menu().
 */
function mediareference_menu() {
  $items = array();

  // arguments: type/field/id/action
  $items['mediareference_js/%/%/%/%'] = array(
    'title' => 'Mediareference Ahah Controller' ,
    'page callback' => 'mediareference_widget_js',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'mediareference.widget.inc',
  );
  $items['mediabrowser'] = array(
    'title' => 'Mediabrowser',
    'page callback' => 'mediareference_browser',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['lightframe/close'] = array(
    'title' => 'Close Lightframe',
    'page callback' => 'mediareference_lightframe_close_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function mediareference_form_alter(&$form, $form_state, $form_id) {
  // Here we simply want to install a form after_build callback.
  // if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
  if (!empty($_REQUEST['lightframe'])) {
    if (isset($_REQUEST['destination'])) {
      $form['info_back'] = array(
        '#value' => '<div>'. l('<<< '. t('Back'), urldecode($_REQUEST['destination'])) .'</div>',
        '#weight' => -10,
      );
    }
    $form['info_title'] = array(
      '#value' => '<h2>'. drupal_get_title() .'</h2>',
      '#weight' => -9,
    );
    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
    $form['#after_build'][] = 'mediareference_lightframe_form_after_build';
  }

  /*if ($form_id == 'views_exposed_form') {
    $form['filters'] = array(
      '#type' => 'fieldset',
      '#title' => 'Filters',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    foreach ($form as $key => $element) {
      if ($key{0} === '#' || in_array($key, array('form_id', 'form_build_id', 'form_token', 'filters'))) {
        continue;
      }
      $form['filters'][$key] = $element;
      unset($form[$key]);
    }
    dpm($form);
  }*/

}

function mediareference_lightframe_form_after_build($form, &$form_state) {
  mediareference_lightframe_child_js();
  return $form;
}

/**
* Implementation of hook_theme().
*/
function mediareference_theme() {
  return array(
    // Theme for the widget.
    'mediareference_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'mediareference.theme.inc',
    ),
    // Theme for the default field formatter
    'mediareference_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'file' => 'mediareference.theme.inc',
    ),

  );
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function mediareference_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page']) && isset($theme_registry['page']['theme paths'])) {
    $module_path = drupal_get_path('module', 'mediareference');
    array_unshift($theme_registry['page']['theme paths'], $module_path);
    array_unshift($theme_registry['page']['preprocess functions'], 'mediareference_pre_preprocess_page');
  }
}

//=====================================
//   VIEWS AND IMAGECACHE HOOKS
//=====================================

/**
 * Implementation of hook_imagecache_default_presets()
 */
function mediareference_imagecache_default_presets() {
  $presets = array();
  $presets['mediareference_thumbs'] = array(
    'presetname' => 'mediareference_thumbs',
    'actions' => array(
      0 => array(
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array(
          'width' => '90',
          'height' => '90'
        )
      )
    )
  );
}

/**
* Implementation of hook_views_api().
*
* @return array with Views API version.
*/
function mediareference_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module','mediareference') . '/views',
  );
}

//=====================================
//   MENU CALLBACKS
//=====================================

function mediareference_browser() {
  $output = '';

  mediareference_lightframe_child_js();

  $view = views_get_view('mediabrowser');
  $view->override_path = $_GET['q'];
  $view->set_display('default');

  // Get the results.
  $output .= $view->preview();

  return $output;
}

//=====================================
//   VIEW EMBED FORM
//=====================================

/**
 * Implementation of hook_views_embed_form().
 */
function mediareference_views_embed_form() {
  return array(
    'mediareference_attach_form' => t('Attach reference to content'),
  );
}

/**
 * Views embed form - "Attach" button
 */
function mediareference_attach_form(&$form_state, $fields) {
  $form = array();

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => intval($fields->nid)
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Attach'
  );

  return $form;
}

/**
 * Views embed form submit handler - "Add to context" button
 */
function mediareference_attach_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['values']['submit']) {
    mediareference_lightframe_close($form_state, array('nid' => $form_state['values']['nid']));
  }
}


//=====================================
//   HELPERS
//=====================================

/**
 * Filter children delta elements
 *
 * @param array $element
 * @param bool $attributes
 * @return
 * element children (delta items)
 */
function mediareference_filter_children(&$element, $attributes = FALSE) {
  $children = array();

  if (is_array($element) && count($element)) {
    foreach ($element as $key => $value) {
      if (is_numeric($key) || ($attributes && $key[0] == '#')) {
        $children[$key] = $value;
      }
    }
  }

  return $children;
}

//=====================================
//   LIGHTFRAME MINI API
//=====================================

/**
 * Add javascript and stylesheets to the child page.
 */
function mediareference_lightframe_child_js() {
  static $processed = FALSE;
  // Make sure external resources are not included more than once.
  if ($processed) {
    return;
  }
  $processed = TRUE;

  // Disable admin_menu, admin module output and similar modules, which
  // is something child windows don't need.
  module_invoke_all('suppress');

  if (module_exists('onbeforeunload')) {
    onbeforeunload_add_js();
  }

  $module_path = drupal_get_path('module', 'mediareference');
  drupal_add_css($module_path .'/mediareference.css');
  drupal_add_js($module_path .'/mediareference.js');

  // Tell Drupal's theme system to use the Modal Frame template.
  $GLOBALS['lightframe_page_template'] = TRUE;

  drupal_add_js(array('mediareference' =>  array('lightframize' => 1)), 'setting');
}

/**
 * Close lightframe modal.
 *
 * @param $args
 *   An optional array of arguments that will be forwarded to the client
 *   side onSubmit callback.
 */
function mediareference_lightframe_close(&$form_state, $args = array()) {
  $form_state['redirect'] = 'lightframe/close';
  $_SESSION['lightframe'] = $args;
}

/**
 * Close lightframe modal menu callback.
 */
function mediareference_lightframe_close_callback() {
  mediareference_lightframe_child_js();
  drupal_add_js('parent.LightframeUpdate();parent.Lightbox.end("forceClose");', 'inline');
  return '';
}

/**
 * Preprocess template variables for page.tpl.php - step 1.
 *
 * Performance enhancement: prevent template_preprocess_page() from generating
 * sidebar blocks when a modal frame has been requested.
 */
function mediareference_pre_preprocess_page(&$variables) {
  if (!empty($GLOBALS['lightframe_page_template'])) {
    $variables['show_blocks'] = FALSE;
  }
}

/**
 * Preprocess template variables for page.tpl.php - step 2.
 */
function mediareference_preprocess_page(&$variables) {
  if (!empty($GLOBALS['lightframe_page_template'])) {
    if (!isset($variables['template_files'])) {
      $variables['template_files'] = array();
    }
    $variables['template_files'][] = 'lightframe-page';
  }
}

